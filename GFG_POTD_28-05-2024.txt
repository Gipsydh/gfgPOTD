Given an array cost[] of positive integers of size n and an integer w, where cost[i] represents the cost of an i kg packet of oranges, 
the task is to find the minimum cost to buy exactly w kg of oranges. The cost array has a 1-based indexing. If buying exactly w kg of oranges is impossible, then return -1.
Note:
1. cost[i] = -1 means that i kg packet of orange is unavailable.
2. It may be assumed that there is an infinite supply of all available packet types.

Example 1:

Input: 
n = 5
cost[] = {20, 10, 4, 50, 100} 
w = 5
Output: 
14
Explanation: 
Purchase the 2kg packet for 10 coins and the 3kg packet for 4 coins to buy 5kg of oranges for 14 coins.

CODE:

class Solution {
  public:
    int solve(int idx, int w, vector<vector<int>> &dp, vector<int> cost){
        if(idx==0){
            return cost[0]*w;
        }
        if(dp[idx][w]!=-1)return dp[idx][w];
        int nontake=solve(idx-1,w,dp,cost);
        int take=INT_MAX;
        if(cost[idx]!=-1&&w>=idx+1){
            take=cost[idx]+solve(idx,w-(idx+1),dp,cost);
        }
        return dp[idx][w]=min(take,nontake);
    }
    int minimumCost(int n, int w, vector<int> &cost) {
        // code here
        vector<vector<int>> dp(n,vector<int>(w+1,-1));
        int res=solve(n-1,w,dp,cost);
        return (res==INT_MAX)?-1:res;
    }
};
