Given an integer array a[] of size n, find the length of the longest subsequence such that the absolute difference between adjacent elements is 1.

Example 1:

Input:
n = 7
a[] = {10, 9, 4, 5, 4, 8, 6}
Output: 
3
Explaination: 
The three possible subsequences of length 3 are {10, 9, 8}, {4, 5, 4}, and {4, 5, 6}, where adjacent elements have a absolute difference of 1.
No valid subsequence of greater length could be formed.

CODE:

class Solution {
  public:
    int longestSubseq(int n, vector<int> &a) {
        // code here
        unordered_map<int,int> m;
        int ans=1;
        m.insert({a[0],1});
        for(int i=1;i<n;i++){
            int curr=0;
            if(m[a[i]-1]){
                curr=a[i]-1;
            }
            if(m[a[i]+1]>m[a[i]-1]){
                curr=a[i]+1;
            }
            if(curr>0){
                int temp=m[curr];
                ans=max(ans,temp+1);
                m[a[i]]=temp+1;
            }
            else{
                m[a[i]]=1;
            }
        }
        return ans;
    }
};
